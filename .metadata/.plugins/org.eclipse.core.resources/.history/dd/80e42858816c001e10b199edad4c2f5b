package com.mycompany.a2;

import com.codename1.charts.util.ColorUtil;
import com.codename1.ui.Button;
import com.codename1.ui.Container;
import com.codename1.ui.Form;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.plaf.Border;
import com.codename1.ui.Label;
import com.codename1.ui.TextField;
import com.codename1.ui.events.ActionEvent;
import java.lang.String;

// Class serves as controller and view 
public class Game extends Form {
	private GameWorld gw;
	private ScoreView sv;
	private MapView mv;

	public Game() {
		gw = new GameWorld();
		sv = new ScoreView(gw);
		mv = new MapView(gw);
		
		gw.addObserver(mv);
		gw.addObserver(sv);
		
		
		this.setLayout(new BorderLayout());
		Command exitCommand = new CommandExit(gw);
		Command accelerateCommand = new CommandAccelerate(gw);
		Command leftCommand = new CommandLeftHeading(gw);
		Command brakeCommand = new CommandBrake(gw);
		Command rightCommand = new CommandRightHeading(gw);
		Command spidercollideCommand = new CommandSpiderCollision(gw);
		Command foodConsumptionCommand = new CommandFoodConsumption(gw);
		Command foodCommand = new CommandFoodStationCollision(gw);
		Command tickCommand = new CommandGameClockTick(gw);
		
		addKeyListener('x', exitCommand);
		addKeyListener('a', accelerateCommand);
		addKeyListener('b', brakeCommand);
		addKeyListener('l', leftCommand);
		addKeyListener('r', rightCommand);
		addKeyListener('f', foodCommand);
		addKeyListener('g', spidercollideCommand);
		addKeyListener('t', tickCommand);
		
		
		Container westContainer = new Container();
		westContainer.getAllStyles().setBorder(Border.createLineBorder(4, ColorUtil.GRAY));
		westContainer.setLayout(new BoxLayout(2));
		
		
		//Accelerate
				Button accelerateButton = new Button("Accelerate");
				accelerateButton.setCommand(accelerateCommand);
				westContainer.addComponent(accelerateButton);
				accelerateButton.getAllStyles().setFgColor(ColorUtil.WHITE);
				accelerateButton.getAllStyles().setBgColor(ColorUtil.BLUE);
				accelerateButton.getAllStyles().setBgTransparency(255);
				accelerateButton.getAllStyles().setMarginBottom(10); 
				
				
				
				//Left
				Button leftButton = new Button("Left");
				leftButton.setCommand(leftCommand);
				westContainer.addComponent(leftButton);	
				leftButton.getAllStyles().setFgColor(ColorUtil.WHITE);
				leftButton.getAllStyles().setBgColor(ColorUtil.BLUE);
				leftButton.getAllStyles().setBgTransparency(255);	
				leftButton.getAllStyles().setMarginBottom(10);
				
				Button changeButton = new Button("Change Strategies");
				//changeButton.setCommand(changeCommand);
				westContainer.addComponent(changeButton);	
				changeButton.getAllStyles().setFgColor(ColorUtil.WHITE);
				changeButton.getAllStyles().setBgColor(ColorUtil.BLUE);
				changeButton.getAllStyles().setBgTransparency(255);	
				changeButton.getAllStyles().setMarginBottom(10);
				
				//East Container with brake and right
				Container eastContainer = new Container();
				eastContainer.getAllStyles().setBorder(Border.createLineBorder(4, ColorUtil.GRAY));
				eastContainer.setLayout(new BoxLayout(2));
				
				//Brake
				Button brakeButton = new Button("Brake");
				brakeButton.setCommand(brakeCommand);
				eastContainer.addComponent(brakeButton);
				brakeButton.getAllStyles().setFgColor(ColorUtil.WHITE);
				brakeButton.getAllStyles().setBgColor(ColorUtil.BLUE);
				brakeButton.getAllStyles().setBgTransparency(255);	
				brakeButton.getAllStyles().setMarginBottom(10);
				
				//Right
				Button rightButton = new Button("Right");
				rightButton.setCommand(rightCommand);
				eastContainer.addComponent(rightButton);
				rightButton.getAllStyles().setFgColor(ColorUtil.WHITE);
				rightButton.getAllStyles().setBgColor(ColorUtil.BLUE);
				rightButton.getAllStyles().setBgTransparency(255);	
				rightButton.getAllStyles().setMarginBottom(10);
				
				Container centerContainer = new Container();
				centerContainer.getAllStyles().setBorder(Border.createLineBorder(4,ColorUtil.MAGENTA));
				
				//South Container
				Container southContainer = new Container();
				southContainer.getAllStyles().setBorder(Border.createLineBorder(4, ColorUtil.GRAY));
				southContainer.setLayout(new FlowLayout(Component.CENTER));
				
				
				//Collide with foodConsumption
				Button foodConsumptionButton = new Button("food consumption");
				southContainer.addComponent(foodConsumptionButton);
				foodConsumptionButton.setCommand(foodConsumptioncollideCommand);
				foodConsumptionButton.getAllStyles().setFgColor(ColorUtil.WHITE);
				foodConsumptionButton.getAllStyles().setBgColor(ColorUtil.BLUE);
				foodConsumptionButton.getAllStyles().setBgTransparency(255);	
				foodConsumptionButton.getAllStyles().setMarginRight(5);
				
				//Collide with flag
				Button flagButton = new Button("Collide with flag");
				//flagButton.setCommand(flagCommand);
				flagButton.getAllStyles().setFgColor(ColorUtil.WHITE);
				flagButton.getAllStyles().setBgColor(ColorUtil.BLUE);
				flagButton.getAllStyles().setBgTransparency(255);	
				flagButton.getAllStyles().setMarginRight(5);
				southContainer.addComponent(flagButton);
				
				//Collide with Drone
				Button collideButton = new Button("Collide with Spider");
				southContainer.addComponent(collideButton);
				collideButton.setCommand(spidercollideCommand);
				collideButton.getAllStyles().setFgColor(ColorUtil.WHITE);
				collideButton.getAllStyles().setBgColor(ColorUtil.BLUE);
				collideButton.getAllStyles().setBgTransparency(255);	
				collideButton.getAllStyles().setMarginRight(5);
				
				//Collide with food
				Button foodButton = new Button("Collide with food Station");
				southContainer.add(foodButton);
				foodButton.setCommand(foodCommand);
				foodButton.getAllStyles().setFgColor(ColorUtil.WHITE);
				foodButton.getAllStyles().setBgColor(ColorUtil.BLUE);
				foodButton.getAllStyles().setBgTransparency(255);	
				foodButton.getAllStyles().setMarginRight(5);
				
				//Tick/game time
				Button tickButton  = new Button("Tick");
				tickButton.setCommand(tickCommand);
				southContainer.add(tickButton);
				tickButton.getAllStyles().setFgColor(ColorUtil.WHITE);
				tickButton.getAllStyles().setBgColor(ColorUtil.BLUE);
				tickButton.getAllStyles().setBgTransparency(255);	
				tickButton.getAllStyles().setMarginRight(5);
				
				//setup the toolbar for the gui
				Toolbar toolbar = new Toolbar();
				this.setToolbar(toolbar);
				toolbar.setTitle("Robo Track ");
				
				//Acc,left and change 
				toolbar.addCommandToSideMenu(accelerateCommand);
				Command soundCommand = new CommandSound(gw);
				CheckBox soundCheck = new CheckBox("Sound");
				soundCheck.setCommand(soundCommand);
				toolbar.addComponentToSideMenu(soundCheck );
				Command aboutInfoCommand = new CommandAbout(gw);
				toolbar.addCommandToSideMenu(aboutInfoCommand);

				toolbar.addCommandToSideMenu(exitCommand);	
				
				Command helpButton = new CommandHelp(gw);
				toolbar.addCommandToRightBar(helpButton);
				
				this.add(BorderLayout.WEST, westContainer);
				this.add(BorderLayout.EAST, eastContainer);
				this.add(BorderLayout.SOUTH, southContainer);
				this.add(BorderLayout.NORTH, mv);
				this.add(BorderLayout.CENTER, sv);
				gw.setMapHeight(mv.getComponentForm().getHeight());
				gw.setMapWidth(mv.getComponentForm().getWidth());
				gw.init();
				this.show();

	}

	private void play() {
		Label myLabel = new Label("Enter a command:");
		this.addComponent(myLabel);
		final TextField myTextField = new TextField();
		this.addComponent(myTextField);
		this.show();

		myTextField.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				String sCommand = myTextField.getText().toString();

				myTextField.clear();
				if (sCommand.length() != 0)
					switch (sCommand.charAt(0)) {

					case 'a':
						gw.setAntSpeed(2);
						break;

					case 'b':
						gw.setAntSpeed(-2);
						break;

					case 'l':
						gw.changeHeading('l');
						break;

					case 'r':
						gw.changeHeading('r');
						break;

					case 'c':
						gw.setFoodConsumptionRate('c');
						break;

					case '1':
						gw.flagCollision(1);
						break;

					case '2':
						gw.flagCollision(2);
						break;

					case '3':
						gw.flagCollision(3);
						break;

					case '4':
						gw.flagCollision(4);
						break;

					case '5':
						gw.flagCollision(5);
						break;

					case '6':
						gw.flagCollision(6);
						break;

					case '7':
						gw.flagCollision(7);
						break;

					case '8':
						gw.flagCollision(8);
						break;

					case '9':
						gw.flagCollision(9);
						break;

					case 'f':
						gw.foodStationCollision();
						break;

					case 'g':
						gw.spiderCollision();
						break;

					case 't':
						gw.tick();
						break;

					case 'd':
						gw.printCurrent();
						break;

					case 'm':
						gw.map();
						break;

					case 'n':
						myLabel.setText("Great lets keep playing!\n Enter a command");
						gw.dontQuit();

						break;

					case 'x':
						// System.out.println("Please confirm to exit");
						myLabel.setText("Please enter y or n");
						gw.quitGame();
						break;

					case 'y':
						gw.exit();
						break;

					default:
						System.out.println("Error: Undefined or Illegal input");
						break;
					}
			}

		});
	}
}
